//
//  EmojiViewModel.swift
//  TeamOXY
//
//  Created by ParkJunHyuk on 2022/06/12.
//

import SwiftUI
import Firebase

class EmojiViewModel : ObservableObject{
    @Published var emojiCount_1 : Int
    @Published var emojiCount_2 : Int
    @Published var emojiCount_3 : Int
    @Published var emojiCount_4 : Int
    @Published var emojiCount_5 : Int
    @Published var emojiCount_6 : Int
    @Published var emojiCount_7 : Int
    @Published var emojiCount_8 : Int
    @Published var emojiCount_9 : Int
    @Published var emojiCount_10 : Int
    @Published var emojiCount_11 : Int
    @Published var emojiCount_12 : Int
    @Published var emojiCount_13 : Int
    @Published var emojiCount_14 : Int
    @Published var emojiCount_15 : Int
    
    // Î°úÎî©Ïãú ÌÅ¥ÎûòÏä§ Ï¥àÍ∏∞ÌôîÎ°ú Ïï†ÎãàÎ©îÏù¥ÏÖò ÏûëÎèôÏùÑ ÎßâÍ∏∞ ÏúÑÌï¥ Î≥ÄÏàò ÏÑ§Ï†ï
    @Published var isLoading : Bool = false
    
    // FireStoreÏóêÏÑú Îç∞Ïù¥ÌÑ∞Î•º Î∞õÏïÑÏò§Í≥† Ï†ÄÏû•Ìï† Î≥ÄÏàò
    @Published var messages : [ReactionEmoji] = []
    
    private var db = Firestore.firestore()
    
    let emojis = ["ü§î","üëé","üëç","ü§©","ü´†", "üî•","‚ù§Ô∏è","üò±","ü§≠","ü•±","üëÄ","‚úÖ","üôÖ","üéâ","üòÇ"]
    
    // FireStore Collection, Document Ïù¥Î¶Ñ
    let selectedCollection1 = "rooms"
    let selectedDocument1 = "ÏùµÎ™ÖÏùò Ìò∏ÎûëÏù¥ Î∞©"
    let selecetedCollection2 = "reactionEmojis"
    
    
    init() {
        self.emojiCount_1 = 0
        self.emojiCount_2 = 0
        self.emojiCount_3 = 0
        self.emojiCount_4 = 0
        self.emojiCount_5 = 0
        self.emojiCount_6 = 0
        self.emojiCount_7 = 0
        self.emojiCount_8 = 0
        self.emojiCount_9 = 0
        self.emojiCount_10 = 0
        self.emojiCount_11 = 0
        self.emojiCount_12 = 0
        self.emojiCount_13 = 0
        self.emojiCount_14 = 0
        self.emojiCount_15 = 0
        
        receiveEmojiCount()
        
        // 0.5 Ï¥àÏùò Ï∞®Ïù¥Î•º ÎëêÏñ¥ Î∑∞Í∞Ä Î°úÎìú ÎêòÏûêÎßàÏûê Ïù¥Î™®ÏßÄÍ∞Ä ÌÑ∞ÏßÄÎäî Ïï†ÎãàÎ©îÏù¥ÏÖòÏùÑ ÎßâÏùå
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            self.isLoading = true
        }
    }
    
    // Firestore Document Î•º ÏÑ§Ï†ïÌïòÍ∏∞ ÏúÑÌïú Ìï®Ïàò
    func setDocument (_ emojis : [String]) {
        
        print("setup")
        
        for emoji in emojis {
            db.collection("\(selectedCollection1)").document("\(selectedDocument1)").collection("\(selecetedCollection2)").document("\(emoji)").setData([
                "reaction_num" : emoji,
                "reaction_count" : 0 // FieldValue.increment(Int64(1))
            ]) { err in
                if let err = err {
                    print("Error writing document: \(err)")
                } else {
                    print("Document successfully written!")
                }
            }
        }
    }
    
    // Firestore Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞ ( Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûòÎì§Ïñ¥Í∞ÄÎäîÏßÄ ÌôïÏù∏ )
    func getEmojiCount() {
        
        db.collection("\(selectedCollection1)").document("\(selectedDocument1)").collection("\(selecetedCollection2)").addSnapshotListener {(querySnapshot, error) in
            guard let documents = querySnapshot?.documents else {
                print("No documents")
                return
            }
            
            self.messages = documents.map { (QueryDocumentSnapshot) -> ReactionEmoji in
                let data = QueryDocumentSnapshot.data()
                
                // Îç∞Ïù¥ÌÑ∞Îäî string ÏóêÏÑú anyÎ°ú Îß§Ìïë ÎêúÎã§ Ï¶â , anyÏóêÏÑú Ïò¨Î∞îÎ•∏ Ïú†ÌòïÏúºÎ°ú Î≥ÄÌôò ÏãúÏºúÏïº ÌïúÎã§
                let reaction_num = data["reaction_num"] as? String ?? ""
                let reaction_count = data["reaction_count"] as? Int ?? 0
                
                return ReactionEmoji(reaction_num: reaction_num, reaction_count: reaction_count)
            }
        }
    }
    
    // FireStore Ïóê ÌïÑÎìú Í∞íÏùÑ 1Ïî© Ï¶ùÍ∞Ä ÏãúÌÇ§Í∏∞ -> Í∞íÏù¥ Î≥ÄÌï†Îïå Ïï†ÎãàÎ©îÏù¥ÏÖòÏù¥ ÎèôÏûë
    func update( _ emoji : String) {
        
        print("ÏóÖÎç∞Ïù¥Ìä∏")
        
        let emojiCountUpdate = db.collection("\(selectedCollection1)").document("\(selectedDocument1)").collection("\(selecetedCollection2)").document("\(emoji)")
        
        emojiCountUpdate.updateData([
            "reaction_num" : emoji,
            "reaction_count" : FieldValue.increment(Int64(1))
        ])
        
        getEmojiCount()
    }
    
    // FireStore Ïóê Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏûàÏùÑÎïå ÏûêÎèôÏúºÎ°ú Ïã§Ìñâ
    func receiveEmojiCount() {

        print("Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Î∞úÏÉù")

        db.collection("\(selectedCollection1)").document("\(selectedDocument1)").collection("\(selecetedCollection2)").document("ü§î")
            .addSnapshotListener { documentSnapshot, error in
              guard let document = documentSnapshot else {
                print("Error fetching document: \(error!)")
                return
              }
              guard let data = document.data() else {
                print("Document data was empty.")
                return
              }

                print("\(self.isLoading)")

                if self.isLoading {
                    let reaction_count = data["reaction_count"] as? Int ?? 0


                    self.emojiCount_1 = reaction_count
                    print("Ï≤´Î≤àÏß∏ : \(self.emojiCount_1)")
                }
            }

        db.collection("\(selectedCollection1)").document("\(selectedDocument1)").collection("\(selecetedCollection2)").document("üëé")
            .addSnapshotListener { documentSnapshot, error in
              guard let document = documentSnapshot else {
                print("Error fetching document: \(error!)")
                return
              }
              guard let data = document.data() else {
                print("Document data was empty.")
                return
              }


                if self.isLoading {
                    let reaction_count = data["reaction_count"] as? Int ?? 0

                    self.emojiCount_2 = reaction_count
                    print("ÎëêÎ≤àÏß∏ : \(self.emojiCount_2)")
                }
            }

        db.collection("\(selectedCollection1)").document("\(selectedDocument1)").collection("\(selecetedCollection2)").document("üëç")
            .addSnapshotListener { documentSnapshot, error in
              guard let document = documentSnapshot else {
                print("Error fetching document: \(error!)")
                return
              }
              guard let data = document.data() else {
                print("Document data was empty.")
                return
              }

                if self.isLoading {
                    let reaction_count = data["reaction_count"] as? Int ?? 0

                    self.emojiCount_3 = reaction_count
                    print("ÏÑ∏Î≤àÏß∏ : \(self.emojiCount_3)")
                }
            }

        db.collection("\(selectedCollection1)").document("\(selectedDocument1)").collection("\(selecetedCollection2)").document("ü§©")
            .addSnapshotListener { documentSnapshot, error in
              guard let document = documentSnapshot else {
                print("Error fetching document: \(error!)")
                return
              }
              guard let data = document.data() else {
                print("Document data was empty.")
                return
              }

                if self.isLoading {
                    let reaction_count = data["reaction_count"] as? Int ?? 0

                    self.emojiCount_4 = reaction_count
                    print("ÎÑ§Î≤àÏß∏ : \(self.emojiCount_4)")
                }
            }

        db.collection("\(selectedCollection1)").document("\(selectedDocument1)").collection("\(selecetedCollection2)").document("ü´†")
            .addSnapshotListener { documentSnapshot, error in
              guard let document = documentSnapshot else {
                print("Error fetching document: \(error!)")
                return
              }
              guard let data = document.data() else {
                print("Document data was empty.")
                return
              }

                if self.isLoading {
                    let reaction_count = data["reaction_count"] as? Int ?? 0

                    self.emojiCount_5 = reaction_count
                    print("Îã§ÏÑØÎ≤àÏß∏ : \(self.emojiCount_5)")
                }
            }

        db.collection("\(selectedCollection1)").document("\(selectedDocument1)").collection("\(selecetedCollection2)").document("üî•")
            .addSnapshotListener { documentSnapshot, error in
              guard let document = documentSnapshot else {
                print("Error fetching document: \(error!)")
                return
              }
              guard let data = document.data() else {
                print("Document data was empty.")
                return
              }

                if self.isLoading {
                    let reaction_count = data["reaction_count"] as? Int ?? 0

                    self.emojiCount_6 = reaction_count
                    print("Ïó¨ÏÑØÎ≤àÏß∏ : \(self.emojiCount_6)")
                }
            }

        db.collection("\(selectedCollection1)").document("\(selectedDocument1)").collection("\(selecetedCollection2)").document("‚ù§Ô∏è")
            .addSnapshotListener { documentSnapshot, error in
              guard let document = documentSnapshot else {
                print("Error fetching document: \(error!)")
                return
              }
              guard let data = document.data() else {
                print("Document data was empty.")
                return
              }

                if self.isLoading {
                    let reaction_count = data["reaction_count"] as? Int ?? 0

                    self.emojiCount_7 = reaction_count
                    print("ÏùºÍ≥±Î≤àÏß∏ : \(self.emojiCount_7)")
                }
            }

        db.collection("\(selectedCollection1)").document("\(selectedDocument1)").collection("\(selecetedCollection2)").document("üò±")
            .addSnapshotListener { documentSnapshot, error in
              guard let document = documentSnapshot else {
                print("Error fetching document: \(error!)")
                return
              }
              guard let data = document.data() else {
                print("Document data was empty.")
                return
              }

                if self.isLoading {
                    let reaction_count = data["reaction_count"] as? Int ?? 0

                    self.emojiCount_8 = reaction_count
                    print("Ïó¨ÎçüÎ≤àÏß∏ : \(self.emojiCount_8)")
                }
            }

        db.collection("\(selectedCollection1)").document("\(selectedDocument1)").collection("\(selecetedCollection2)").document("ü§≠")
            .addSnapshotListener { documentSnapshot, error in
              guard let document = documentSnapshot else {
                print("Error fetching document: \(error!)")
                return
              }
              guard let data = document.data() else {
                print("Document data was empty.")
                return
              }

                if self.isLoading {
                    let reaction_count = data["reaction_count"] as? Int ?? 0

                    self.emojiCount_9 = reaction_count
                    print("ÏïÑÌôâÎ≤àÏß∏ : \(self.emojiCount_9)")
                }
            }

        db.collection("\(selectedCollection1)").document("\(selectedDocument1)").collection("\(selecetedCollection2)").document("ü•±")
            .addSnapshotListener { documentSnapshot, error in
              guard let document = documentSnapshot else {
                print("Error fetching document: \(error!)")
                return
              }
              guard let data = document.data() else {
                print("Document data was empty.")
                return
              }

                if self.isLoading {
                    let reaction_count = data["reaction_count"] as? Int ?? 0

                    self.emojiCount_10 = reaction_count
                    print("Ïó¥Î≤àÏß∏ : \(self.emojiCount_10)")
                }
            }

        db.collection("\(selectedCollection1)").document("\(selectedDocument1)").collection("\(selecetedCollection2)").document("üëÄ")
            .addSnapshotListener { documentSnapshot, error in
              guard let document = documentSnapshot else {
                print("Error fetching document: \(error!)")
                return
              }
              guard let data = document.data() else {
                print("Document data was empty.")
                return
              }

                if self.isLoading {
                    let reaction_count = data["reaction_count"] as? Int ?? 0

                    self.emojiCount_11 = reaction_count
                    print("Ïó¥ÌïúÎ≤àÏß∏ : \(self.emojiCount_11)")
                }
            }

        db.collection("\(selectedCollection1)").document("\(selectedDocument1)").collection("\(selecetedCollection2)").document("‚úÖ")
            .addSnapshotListener { documentSnapshot, error in
              guard let document = documentSnapshot else {
                print("Error fetching document: \(error!)")
                return
              }
              guard let data = document.data() else {
                print("Document data was empty.")
                return
              }

                if self.isLoading {
                    let reaction_count = data["reaction_count"] as? Int ?? 0

                    self.emojiCount_12 = reaction_count
                    print("Ïó¥ÎëêÎ≤àÏß∏ : \(self.emojiCount_12)")
                }
            }

        db.collection("\(selectedCollection1)").document("\(selectedDocument1)").collection("\(selecetedCollection2)").document("üôÖ")
            .addSnapshotListener { documentSnapshot, error in
              guard let document = documentSnapshot else {
                print("Error fetching document: \(error!)")
                return
              }
              guard let data = document.data() else {
                print("Document data was empty.")
                return
              }

                if self.isLoading {
                    let reaction_count = data["reaction_count"] as? Int ?? 0

                    self.emojiCount_13 = reaction_count
                    print("Ïó¥ÏÑ∏Î≤àÏß∏ : \(self.emojiCount_13)")
                }
            }

        db.collection("\(selectedCollection1)").document("\(selectedDocument1)").collection("\(selecetedCollection2)").document("üéâ")
            .addSnapshotListener { documentSnapshot, error in
              guard let document = documentSnapshot else {
                print("Error fetching document: \(error!)")
                return
              }
              guard let data = document.data() else {
                print("Document data was empty.")
                return
              }

                if self.isLoading {
                    let reaction_count = data["reaction_count"] as? Int ?? 0

                    self.emojiCount_14 = reaction_count
                    print("Ïó¥ÎÑ§Î≤àÏß∏ : \(self.emojiCount_14)")
                }
            }

        db.collection("\(selectedCollection1)").document("\(selectedDocument1)").collection("\(selecetedCollection2)").document("üòÇ")
            .addSnapshotListener { documentSnapshot, error in
              guard let document = documentSnapshot else {
                print("Error fetching document: \(error!)")
                return
              }
              guard let data = document.data() else {
                print("Document data was empty.")
                return
              }

                if self.isLoading {
                    let reaction_count = data["reaction_count"] as? Int ?? 0

                    self.emojiCount_15 = reaction_count
                    print("Ïó¥Îã§ÏÑØÎ≤àÏß∏ : \(self.emojiCount_15)")
                }
            }
    }
}
